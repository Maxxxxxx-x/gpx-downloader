// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users WHERE Id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const dropUsers = `-- name: DropUsers :exec
DELETE FROM Users
`

func (q *Queries) DropUsers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, dropUsers)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id FROM Users WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO Users (Id) VALUES ( $1 ) ON CONFLICT DO NOTHING
`

func (q *Queries) InsertUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, insertUser, id)
	return err
}
