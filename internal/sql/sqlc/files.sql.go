// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: files.sql

package sqlc

import (
	"context"
)

type BulkInsertFilesParams struct {
	ID        string `json:"id"`
	Filename  string `json:"filename"`
	Sha512sum string `json:"sha512sum"`
}

const deleteFileById = `-- name: DeleteFileById :exec
DELETE FROM Files WHERE Id = $1
`

func (q *Queries) DeleteFileById(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteFileById, id)
	return err
}

const deleteFileByName = `-- name: DeleteFileByName :exec
DELETE FROM Files WHERE FileName = $1
`

func (q *Queries) DeleteFileByName(ctx context.Context, filename string) error {
	_, err := q.db.Exec(ctx, deleteFileByName, filename)
	return err
}

const dropFiles = `-- name: DropFiles :exec
DELETE FROM Files
`

func (q *Queries) DropFiles(ctx context.Context) error {
	_, err := q.db.Exec(ctx, dropFiles)
	return err
}

const getFileById = `-- name: GetFileById :one
SELECT id, filename, sha512sum FROM Files WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetFileById(ctx context.Context, id string) (File, error) {
	row := q.db.QueryRow(ctx, getFileById, id)
	var i File
	err := row.Scan(&i.ID, &i.Filename, &i.Sha512sum)
	return i, err
}

const getFileByName = `-- name: GetFileByName :one
SELECT id, filename, sha512sum FROM Files WHERE FileName = $1 LIMIT 1
`

func (q *Queries) GetFileByName(ctx context.Context, filename string) (File, error) {
	row := q.db.QueryRow(ctx, getFileByName, filename)
	var i File
	err := row.Scan(&i.ID, &i.Filename, &i.Sha512sum)
	return i, err
}

const insertFile = `-- name: InsertFile :one
INSERT INTO Files (
    Id, FileName, SHA512Sum
) VALUES ( $1, $2, $3 ) RETURNING id, filename, sha512sum
`

type InsertFileParams struct {
	ID        string `json:"id"`
	Filename  string `json:"filename"`
	Sha512sum string `json:"sha512sum"`
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) (File, error) {
	row := q.db.QueryRow(ctx, insertFile, arg.ID, arg.Filename, arg.Sha512sum)
	var i File
	err := row.Scan(&i.ID, &i.Filename, &i.Sha512sum)
	return i, err
}
